{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Objective\n",
    "\n",
    "## Which is the better plan?\n",
    "\n",
    "You work as an analyst for the telecom operator Megaline. The company offers its clients two prepaid plans, Surf and Ultimate. The commercial department wants to know which of the plans brings in more revenue in order to adjust the advertising budget.\n",
    "\n",
    "You are going to carry out a preliminary analysis of the plans based on a relatively small client selection. You'll have the data on 500 Megaline clients: who the clients are, where they're from, which plan they use, and the number of calls they made and text messages they sent in 2018. Your job is to analyze the clients' behavior and determine which prepaid plan brings in more revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading all the libraries\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import math as mt\n",
    "import random\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data files into different DataFrames\n",
    "calls = pd.read_csv('/datasets/megaline_calls.csv')\n",
    "\n",
    "internet = pd.read_csv('/datasets/megaline_internet.csv')\n",
    "\n",
    "messages = pd.read_csv('/datasets/megaline_messages.csv')\n",
    "\n",
    "plans = pd.read_csv('/datasets/megaline_plans.csv')\n",
    "\n",
    "users = pd.read_csv('/datasets/megaline_users.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prepare the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The users table (data on users):\n",
    "        user_id — unique user identifier\n",
    "        \n",
    "        first_name — user's name\n",
    "        \n",
    "        last_name — user's last name\n",
    "        \n",
    "        age — user's age (years)\n",
    "        \n",
    "        reg_date — subscription date (dd, mm, yy)\n",
    "        \n",
    "        churn_date — the date the user stopped using the service (if the value is missing, the calling plan was being used when this database was extracted)\n",
    "        \n",
    "        city — user's city of residence\n",
    "        \n",
    "        plan — calling plan name\n",
    "        \n",
    "        \n",
    "The calls table (data on calls):\n",
    "\n",
    "        id — unique call identifier\n",
    "        \n",
    "        call_date — call date\n",
    "        \n",
    "        duration — call duration (in minutes)\n",
    "        \n",
    "        user_id — the identifier of the user making the call\n",
    "        \n",
    "        \n",
    "The messages table (data on texts):\n",
    "\n",
    "        id — unique text message identifier\n",
    "        \n",
    "        message_date — text message date\n",
    "        \n",
    "        user_id — the identifier of the user sending the text\n",
    "        \n",
    "        \n",
    "The internet table (data on web sessions):\n",
    "\n",
    "        id — unique session identifier\n",
    "        \n",
    "        mb_used — the volume of data spent during the session (in megabytes)\n",
    "        \n",
    "        session_date — web session date\n",
    "        \n",
    "        user_id — user identifier\n",
    "        \n",
    "        \n",
    "The plans table (data on the plans):\n",
    "\n",
    "        plan_name — calling plan name\n",
    "        \n",
    "        usd_monthly_fee — monthly charge in US dollars\n",
    "        \n",
    "        minutes_included — monthly minute allowance\n",
    "        \n",
    "        messages_included — monthly text allowance\n",
    "        \n",
    "        mb_per_month_included — data volume allowance (in megabytes)\n",
    "        \n",
    "        usd_per_minute — price per minute after exceeding the package limits (e.g., if the package includes 100 minutes, the 101st minute will be charged)\n",
    "        \n",
    "        usd_per_message — price per text after exceeding the package limits\n",
    "        \n",
    "        usd_per_gb — price per extra gigabyte of data after exceeding the package limits (1 GB = 1024 megabytes)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      "dtypes: float64(2), int64(5), object(1)\n",
      "memory usage: 256.0+ bytes\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the plans' DataFrame\n",
    "print(plans.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for plans\n",
    "display(plans)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I used info() to get a quick summary of the columns, missing values, and data types. There are only two plans, the usd_per_message and usd_per_minute are floats, the plan_name is type object and the rest are integers. Since the table is short I displayed the whole table. The internet included in the plan is in metabytes but the price of extra internet is in gigabytes, so below I will add a column to convert the mb_per_month_included to gigabytes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   gb_per_month_included  \n",
       "0                   15.0  \n",
       "1                   30.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plans['gb_per_month_included'] = plans['mb_per_month_included'] / 1024\n",
    "display(plans)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   user_id     500 non-null    int64 \n",
      " 1   first_name  500 non-null    object\n",
      " 2   last_name   500 non-null    object\n",
      " 3   age         500 non-null    int64 \n",
      " 4   city        500 non-null    object\n",
      " 5   reg_date    500 non-null    object\n",
      " 6   plan        500 non-null    object\n",
      " 7   churn_date  34 non-null     object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the users' DataFrame\n",
    "\n",
    "print(users.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>427</th>\n",
       "      <td>1427</td>\n",
       "      <td>Zofia</td>\n",
       "      <td>Brock</td>\n",
       "      <td>64</td>\n",
       "      <td>Washington-Arlington-Alexandria, DC-VA-MD-WV MSA</td>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>1137</td>\n",
       "      <td>Allegra</td>\n",
       "      <td>Hopkins</td>\n",
       "      <td>20</td>\n",
       "      <td>Chicago-Naperville-Elgin, IL-IN-WI MSA</td>\n",
       "      <td>2018-10-02</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>1346</td>\n",
       "      <td>Emmie</td>\n",
       "      <td>Gonzalez</td>\n",
       "      <td>59</td>\n",
       "      <td>Tucson, AZ MSA</td>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>1362</td>\n",
       "      <td>Kenyetta</td>\n",
       "      <td>Mcknight</td>\n",
       "      <td>65</td>\n",
       "      <td>Denver-Aurora-Lakewood, CO MSA</td>\n",
       "      <td>2018-01-18</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>430</th>\n",
       "      <td>1430</td>\n",
       "      <td>Myung</td>\n",
       "      <td>Pugh</td>\n",
       "      <td>63</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-12-07</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name last_name  age  \\\n",
       "427     1427      Zofia     Brock   64   \n",
       "137     1137    Allegra   Hopkins   20   \n",
       "346     1346      Emmie  Gonzalez   59   \n",
       "362     1362   Kenyetta  Mcknight   65   \n",
       "430     1430      Myung      Pugh   63   \n",
       "\n",
       "                                                 city    reg_date      plan  \\\n",
       "427  Washington-Arlington-Alexandria, DC-VA-MD-WV MSA  2018-01-26  ultimate   \n",
       "137            Chicago-Naperville-Elgin, IL-IN-WI MSA  2018-10-02      surf   \n",
       "346                                    Tucson, AZ MSA  2018-04-26  ultimate   \n",
       "362                    Denver-Aurora-Lakewood, CO MSA  2018-01-18      surf   \n",
       "430         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-12-07      surf   \n",
       "\n",
       "    churn_date  \n",
       "427        NaN  \n",
       "137        NaN  \n",
       "346        NaN  \n",
       "362        NaN  \n",
       "430        NaN  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "random.seed(15)\n",
    "display(users.sample(5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Using info() again lets me see that the only column with missing data is churn_date which only has data if customers cancel their plan. Customers begining and ending service is within the natural cycle of the business so I am going to keep all users information. user_id and age columns are the only integer datatypes and the rest are objects. I will now change the reg_date and churn_date into datetime datatypes. The other issue is the city column. The format is city, state, country (also misspelled), and some of the users have multiple cities and states. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fix Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype         \n",
      "---  ------      --------------  -----         \n",
      " 0   user_id     500 non-null    int64         \n",
      " 1   first_name  500 non-null    object        \n",
      " 2   last_name   500 non-null    object        \n",
      " 3   age         500 non-null    int64         \n",
      " 4   city        500 non-null    object        \n",
      " 5   reg_date    500 non-null    datetime64[ns]\n",
      " 6   plan        500 non-null    object        \n",
      " 7   churn_date  34 non-null     datetime64[ns]\n",
      "dtypes: datetime64[ns](2), int64(2), object(4)\n",
      "memory usage: 31.4+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                   city  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "\n",
       "    reg_date      plan churn_date  \n",
       "0 2018-12-24  ultimate        NaT  \n",
       "1 2018-08-13      surf        NaT  \n",
       "2 2018-10-21      surf        NaT  \n",
       "3 2018-01-28      surf        NaT  \n",
       "4 2018-05-23      surf        NaT  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "users['reg_date'] = pd.to_datetime(users['reg_date'], format = '%Y-%m-%d')\n",
    "users['churn_date'] = pd.to_datetime(users['churn_date'], format = '%Y-%m-%d')\n",
    "print(users.info())\n",
    "display(users.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the date is fixed. I am going to take a closer look at the cities. First by using unique():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Albany-Schenectady-Troy, NY MSA' 'Albuquerque, NM MSA'\n",
      " 'Atlanta-Sandy Springs-Roswell, GA MSA'\n",
      " 'Austin-Round Rock-Georgetown, TX MSA' 'Bakersfield, CA MSA'\n",
      " 'Baltimore-Columbia-Towson, MD MSA' 'Baton Rouge, LA MSA'\n",
      " 'Birmingham-Hoover, AL MSA' 'Boston-Cambridge-Newton, MA-NH MSA'\n",
      " 'Bridgeport-Stamford-Norwalk, CT MSA' 'Buffalo-Cheektowaga, NY MSA'\n",
      " 'Cape Coral-Fort Myers, FL MSA' 'Charleston-North Charleston, SC MSA'\n",
      " 'Charlotte-Concord-Gastonia, NC-SC MSA'\n",
      " 'Chicago-Naperville-Elgin, IL-IN-WI MSA' 'Cincinnati, OH-KY-IN MSA'\n",
      " 'Cleveland-Elyria, OH MSA' 'Colorado Springs, CO MSA' 'Columbia, SC MSA'\n",
      " 'Columbus, OH MSA' 'Dallas-Fort Worth-Arlington, TX MSA'\n",
      " 'Dayton-Kettering, OH MSA' 'Denver-Aurora-Lakewood, CO MSA'\n",
      " 'Detroit-Warren-Dearborn, MI MSA' 'El Paso, TX MSA' 'Fresno, CA MSA'\n",
      " 'Grand Rapids-Kentwood, MI MSA' 'Greensboro-High Point, NC MSA'\n",
      " 'Houston-The Woodlands-Sugar Land, TX MSA'\n",
      " 'Indianapolis-Carmel-Anderson, IN MSA' 'Jacksonville, FL MSA'\n",
      " 'Kansas City, MO-KS MSA' 'Knoxville, TN MSA'\n",
      " 'Las Vegas-Henderson-Paradise, NV MSA'\n",
      " 'Los Angeles-Long Beach-Anaheim, CA MSA'\n",
      " 'Louisville/Jefferson County, KY-IN MSA' 'Memphis, TN-MS-AR MSA'\n",
      " 'Miami-Fort Lauderdale-West Palm Beach, FL MSA'\n",
      " 'Milwaukee-Waukesha, WI MSA'\n",
      " 'Minneapolis-St. Paul-Bloomington, MN-WI MSA'\n",
      " 'Nashville-Davidson–Murfreesboro–Franklin, TN MSA'\n",
      " 'New Haven-Milford, CT MSA' 'New Orleans-Metairie, LA MSA'\n",
      " 'New York-Newark-Jersey City, NY-NJ-PA MSA'\n",
      " 'North Port-Sarasota-Bradenton, FL MSA' 'Oklahoma City, OK MSA'\n",
      " 'Omaha-Council Bluffs, NE-IA MSA' 'Orlando-Kissimmee-Sanford, FL MSA'\n",
      " 'Oxnard-Thousand Oaks-Ventura, CA MSA'\n",
      " 'Philadelphia-Camden-Wilmington, PA-NJ-DE-MD MSA'\n",
      " 'Phoenix-Mesa-Chandler, AZ MSA' 'Pittsburgh, PA MSA'\n",
      " 'Portland-Vancouver-Hillsboro, OR-WA MSA' 'Providence-Warwick, RI-MA MSA'\n",
      " 'Raleigh-Cary, NC MSA' 'Richmond, VA MSA'\n",
      " 'Riverside-San Bernardino-Ontario, CA MSA' 'Rochester, NY MSA'\n",
      " 'Sacramento–Roseville–Folsom, CA MSA' 'Salt Lake City, UT MSA'\n",
      " 'San Antonio-New Braunfels, TX MSA'\n",
      " 'San Diego-Chula Vista-Carlsbad, CA MSA'\n",
      " 'San Francisco-Oakland-Berkeley, CA MSA'\n",
      " 'San Jose-Sunnyvale-Santa Clara, CA MSA'\n",
      " 'Seattle-Tacoma-Bellevue, WA MSA' 'St. Louis, MO-IL MSA'\n",
      " 'Stockton, CA MSA' 'Tampa-St. Petersburg-Clearwater, FL MSA'\n",
      " 'Tucson, AZ MSA' 'Tulsa, OK MSA' 'Urban Honolulu, HI MSA'\n",
      " 'Virginia Beach-Norfolk-Newport News, VA-NC MSA'\n",
      " 'Washington-Arlington-Alexandria, DC-VA-MD-WV MSA']\n"
     ]
    }
   ],
   "source": [
    "print(users['city'].sort_values().unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The column name of 'city' is not representative of the data so I will change the name to 'region'. All of the cities are seperated from states by a comma, so I can use that to add new columns for state and city. I will also fix the spelling of 'USA'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>region</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA USA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA USA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Seattle-Tacoma-Bellevue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV USA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Las Vegas-Henderson-Paradise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK USA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Tulsa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA USA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Seattle-Tacoma-Bellevue</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                 region  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA USA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA USA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV USA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK USA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA USA   \n",
       "\n",
       "    reg_date      plan churn_date                           city  \n",
       "0 2018-12-24  ultimate        NaT  Atlanta-Sandy Springs-Roswell  \n",
       "1 2018-08-13      surf        NaT        Seattle-Tacoma-Bellevue  \n",
       "2 2018-10-21      surf        NaT   Las Vegas-Henderson-Paradise  \n",
       "3 2018-01-28      surf        NaT                          Tulsa  \n",
       "4 2018-05-23      surf        NaT        Seattle-Tacoma-Bellevue  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "users.rename(columns = {'city': 'region'}, inplace = True)\n",
    "users['region'] = [sub.replace('MSA', 'USA') for sub in users['region']]\n",
    "city = []\n",
    "state_country = []\n",
    "for row in users['region']:\n",
    "    add_city = row.split(',')\n",
    "    city.append(add_city[0])\n",
    "    state_country.append(add_city[1])\n",
    "users['city'] = city\n",
    "display(users.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>region</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA USA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA USA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Seattle-Tacoma-Bellevue</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV USA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Las Vegas-Henderson-Paradise</td>\n",
       "      <td>NV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK USA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Tulsa</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA USA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaT</td>\n",
       "      <td>Seattle-Tacoma-Bellevue</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                 region  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA USA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA USA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV USA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK USA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA USA   \n",
       "\n",
       "    reg_date      plan churn_date                           city state  \n",
       "0 2018-12-24  ultimate        NaT  Atlanta-Sandy Springs-Roswell    GA  \n",
       "1 2018-08-13      surf        NaT        Seattle-Tacoma-Bellevue    WA  \n",
       "2 2018-10-21      surf        NaT   Las Vegas-Henderson-Paradise    NV  \n",
       "3 2018-01-28      surf        NaT                          Tulsa    OK  \n",
       "4 2018-05-23      surf        NaT        Seattle-Tacoma-Bellevue    WA  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "state = []\n",
    "for item in state_country:\n",
    "    add_state = item.split(' ')\n",
    "    state.append(add_state[1])\n",
    "users['state'] = state\n",
    "display(users.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Enrich Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Here I am going to check the percentage of each plan. If the sample contains an equal or close to equal amount of people for each plan it will be easier to compare the plans. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ultimate:  32.2\n",
      "surf:  67.80000000000001\n"
     ]
    }
   ],
   "source": [
    "per_ultimate = users[users['plan'] == 'ultimate']['plan'].count() / 500 *100\n",
    "per_surf = users[users['plan'] == 'surf']['plan'].count() /500 *100\n",
    "print('ultimate: ', per_ultimate)\n",
    "print('surf: ', per_surf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ultimate plan only accounts for one-third of the sample. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype  \n",
      "---  ------     --------------   -----  \n",
      " 0   id         137735 non-null  object \n",
      " 1   user_id    137735 non-null  int64  \n",
      " 2   call_date  137735 non-null  object \n",
      " 3   duration   137735 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 4.2+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the calls' DataFrame\n",
    "print(calls.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26456</th>\n",
       "      <td>1100_13</td>\n",
       "      <td>1100</td>\n",
       "      <td>2018-12-20</td>\n",
       "      <td>4.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133352</th>\n",
       "      <td>1483_149</td>\n",
       "      <td>1483</td>\n",
       "      <td>2018-06-26</td>\n",
       "      <td>8.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87949</th>\n",
       "      <td>1322_57</td>\n",
       "      <td>1322</td>\n",
       "      <td>2018-08-28</td>\n",
       "      <td>7.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30919</th>\n",
       "      <td>1115_553</td>\n",
       "      <td>1115</td>\n",
       "      <td>2018-12-12</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111703</th>\n",
       "      <td>1392_113</td>\n",
       "      <td>1392</td>\n",
       "      <td>2018-11-11</td>\n",
       "      <td>5.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id   call_date  duration\n",
       "26456    1100_13     1100  2018-12-20      4.30\n",
       "133352  1483_149     1483  2018-06-26      8.27\n",
       "87949    1322_57     1322  2018-08-28      7.68\n",
       "30919   1115_553     1115  2018-12-12      0.00\n",
       "111703  1392_113     1392  2018-11-11      5.69"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for calls\n",
    "display(calls.sample(5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Again I will change the call_date to datetime datatype. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration\n",
       "0   1000_93     1000 2018-12-27      8.52\n",
       "1  1000_145     1000 2018-12-27     13.66\n",
       "2  1000_247     1000 2018-12-27     14.48\n",
       "3  1000_309     1000 2018-12-28      5.76\n",
       "4  1000_380     1000 2018-12-30      4.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   id         137735 non-null  object        \n",
      " 1   user_id    137735 non-null  int64         \n",
      " 2   call_date  137735 non-null  datetime64[ns]\n",
      " 3   duration   137735 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 4.2+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "calls['call_date'] = pd.to_datetime(calls['call_date'], format = '%Y-%m-%d')\n",
    "display(calls.head())\n",
    "print(calls.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will need to know the total minutes each customer has per month. First I will create a new column and extract the month from the call_date. Then I can use the groupby() method to get the total minutes of the calls per customer per month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration  month\n",
       "0   1000_93     1000 2018-12-27      8.52     12\n",
       "1  1000_145     1000 2018-12-27     13.66     12\n",
       "2  1000_247     1000 2018-12-27     14.48     12\n",
       "3  1000_309     1000 2018-12-28      5.76     12\n",
       "4  1000_380     1000 2018-12-30      4.22     12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "calls['month'] = calls['call_date'].dt.month\n",
    "display(calls.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   id            76051 non-null  object\n",
      " 1   user_id       76051 non-null  int64 \n",
      " 2   message_date  76051 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.7+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the messages' DataFrame\n",
    "print(messages.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9510</th>\n",
       "      <td>1069_631</td>\n",
       "      <td>1069</td>\n",
       "      <td>2018-11-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53139</th>\n",
       "      <td>1339_273</td>\n",
       "      <td>1339</td>\n",
       "      <td>2018-09-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46279</th>\n",
       "      <td>1316_88</td>\n",
       "      <td>1316</td>\n",
       "      <td>2018-09-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58947</th>\n",
       "      <td>1374_121</td>\n",
       "      <td>1374</td>\n",
       "      <td>2018-06-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66442</th>\n",
       "      <td>1433_382</td>\n",
       "      <td>1433</td>\n",
       "      <td>2018-12-25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date\n",
       "9510   1069_631     1069   2018-11-09\n",
       "53139  1339_273     1339   2018-09-30\n",
       "46279   1316_88     1316   2018-09-21\n",
       "58947  1374_121     1374   2018-06-18\n",
       "66442  1433_382     1433   2018-12-25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for messages\n",
    "display(messages.sample(5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will change message_date to datetime datatype. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype         \n",
      "---  ------        --------------  -----         \n",
      " 0   id            76051 non-null  object        \n",
      " 1   user_id       76051 non-null  int64         \n",
      " 2   message_date  76051 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.7+ MB\n",
      "None\n",
      "         id  user_id message_date\n",
      "0  1000_125     1000   2018-12-27\n",
      "1  1000_160     1000   2018-12-31\n",
      "2  1000_223     1000   2018-12-31\n",
      "3  1000_251     1000   2018-12-27\n",
      "4  1000_255     1000   2018-12-26\n"
     ]
    }
   ],
   "source": [
    "messages['message_date'] = pd.to_datetime(messages['message_date'], format = '%Y-%m-%d')\n",
    "print(messages.info())\n",
    "print(messages.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will need to know how many messages each customer sends per month. I will add a month column, then group by user_id and month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76001</th>\n",
       "      <td>1497_3</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-25</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76002</th>\n",
       "      <td>1497_32</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76003</th>\n",
       "      <td>1497_45</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76004</th>\n",
       "      <td>1497_47</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-19</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76005</th>\n",
       "      <td>1497_53</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8737 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date  month\n",
       "0      1000_125     1000   2018-12-27     12\n",
       "1      1000_160     1000   2018-12-31     12\n",
       "2      1000_223     1000   2018-12-31     12\n",
       "3      1000_251     1000   2018-12-27     12\n",
       "4      1000_255     1000   2018-12-26     12\n",
       "...         ...      ...          ...    ...\n",
       "76001    1497_3     1497   2018-12-25     12\n",
       "76002   1497_32     1497   2018-12-14     12\n",
       "76003   1497_45     1497   2018-12-11     12\n",
       "76004   1497_47     1497   2018-12-19     12\n",
       "76005   1497_53     1497   2018-12-29     12\n",
       "\n",
       "[8737 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "messages['month'] = messages['message_date'].dt.month\n",
    "messages_per_month = messages.groupby(['user_id', 'month'])\n",
    "display(messages_per_month.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            104825 non-null  object \n",
      " 1   user_id       104825 non-null  int64  \n",
      " 2   session_date  104825 non-null  object \n",
      " 3   mb_used       104825 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 3.2+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the internet DataFrame\n",
    "print(internet.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>42268</th>\n",
       "      <td>1187_445</td>\n",
       "      <td>1187</td>\n",
       "      <td>2018-06-15</td>\n",
       "      <td>400.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71718</th>\n",
       "      <td>1334_286</td>\n",
       "      <td>1334</td>\n",
       "      <td>2018-08-20</td>\n",
       "      <td>660.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103612</th>\n",
       "      <td>1495_235</td>\n",
       "      <td>1495</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>378.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12133</th>\n",
       "      <td>1059_241</td>\n",
       "      <td>1059</td>\n",
       "      <td>2018-06-10</td>\n",
       "      <td>8.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60600</th>\n",
       "      <td>1276_84</td>\n",
       "      <td>1276</td>\n",
       "      <td>2018-12-18</td>\n",
       "      <td>104.53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id session_date  mb_used\n",
       "42268   1187_445     1187   2018-06-15   400.70\n",
       "71718   1334_286     1334   2018-08-20   660.91\n",
       "103612  1495_235     1495   2018-12-30   378.88\n",
       "12133   1059_241     1059   2018-06-10     8.34\n",
       "60600    1276_84     1276   2018-12-18   104.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print a sample of data for the internet traffic\n",
    "display(internet.sample(5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will change the session datatype from object to datetime. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fix data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count   Dtype         \n",
      "---  ------        --------------   -----         \n",
      " 0   id            104825 non-null  object        \n",
      " 1   user_id       104825 non-null  int64         \n",
      " 2   session_date  104825 non-null  datetime64[ns]\n",
      " 3   mb_used       104825 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 3.2+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "internet['session_date'] = pd.to_datetime(internet['session_date'], format = '%Y-%m-%d')\n",
    "print(internet.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will need to know how much internet is used by each customer per month. I will also add a new column for gb used each month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>month</th>\n",
       "      <th>gb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>12</td>\n",
       "      <td>0.087754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "      <td>12</td>\n",
       "      <td>0.644922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "      <td>12</td>\n",
       "      <td>0.264639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "      <td>12</td>\n",
       "      <td>0.859590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used  month   gb_used\n",
       "0   1000_13     1000   2018-12-29    89.86     12  0.087754\n",
       "1  1000_204     1000   2018-12-31     0.00     12  0.000000\n",
       "2  1000_379     1000   2018-12-28   660.40     12  0.644922\n",
       "3  1000_413     1000   2018-12-26   270.99     12  0.264639\n",
       "4  1000_442     1000   2018-12-27   880.22     12  0.859590"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "internet['month'] = internet['session_date'].dt.month\n",
    "internet_per_month = internet.groupby(['user_id', 'month'])\n",
    "\n",
    "internet['gb_used'] = internet['mb_used']/1024\n",
    "display(internet.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Study plan conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   gb_per_month_included  \n",
       "0                   15.0  \n",
       "1                   30.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print out the plan conditions and make sure they are clear for you\n",
    "display(plans)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Aggregate data per user\n",
    "\n",
    "[Now, as the data is clean, aggregate data per user per period in order to have just one record per user per period. It should ease the further analysis a lot.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               call_date\n",
      "user_id month           \n",
      "1000    12            16\n",
      "1001    8             27\n",
      "        9             49\n",
      "        10            65\n",
      "        11            64\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of calls made by each user per month. Save the result.\n",
    "\n",
    "minutes_per_month = calls.groupby(['user_id', 'month'])\n",
    "calls_count = minutes_per_month.agg({'call_date': 'count'})\n",
    "print(calls_count.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               duration\n",
      "user_id month          \n",
      "1000    12       116.83\n",
      "1001    8        171.14\n",
      "        9        297.69\n",
      "        10       374.11\n",
      "        11       404.59\n",
      "               duration\n",
      "user_id month          \n",
      "1000    12     7.301875\n",
      "1001    8      6.338519\n",
      "        9      6.075306\n",
      "        10     5.755538\n",
      "        11     6.321719\n"
     ]
    }
   ],
   "source": [
    "# Calculate the amount of minutes spent by each user per month. Save the result.\n",
    "minutes_total = minutes_per_month.agg({'duration': 'sum'})\n",
    "avg_duration =  minutes_per_month.agg({'duration': 'mean'})\n",
    "print(minutes_total.head())\n",
    "print(avg_duration.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               id\n",
      "user_id month    \n",
      "1000    12     11\n",
      "1001    8      30\n",
      "        9      44\n",
      "        10     53\n",
      "        11     36\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of messages sent by each user per month. Save the result.\n",
    "total_messages = messages_per_month.agg({'id': 'count'})\n",
    "print(total_messages.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 gb_used\n",
      "user_id month           \n",
      "1000    12      1.856904\n",
      "1001    8       6.756982\n",
      "        9      13.002754\n",
      "        10     21.807119\n",
      "        11     18.070605\n"
     ]
    }
   ],
   "source": [
    "# Calculate the volume of internet traffic used by each user per month. Save the result.\n",
    "total_internet = internet_per_month.agg({'gb_used': 'sum'})\n",
    "print(total_internet.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Merging the data from the aggregate functions will give a table of how each user is using their plan each month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 2293 entries, (1000, 12) to (1499, 12)\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   call_date     2258 non-null   float64\n",
      " 1   duration      2258 non-null   float64\n",
      " 2   id            1806 non-null   float64\n",
      " 3   gb_used       2277 non-null   float64\n",
      " 4   avg_duration  2258 non-null   float64\n",
      "dtypes: float64(5)\n",
      "memory usage: 116.8 KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>id</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_date  duration    id    gb_used  avg_duration\n",
       "user_id month                                                    \n",
       "1000    12          16.0    116.83  11.0   1.856904      7.301875\n",
       "1001    8           27.0    171.14  30.0   6.756982      6.338519\n",
       "        9           49.0    297.69  44.0  13.002754      6.075306\n",
       "        10          65.0    374.11  53.0  21.807119      5.755538\n",
       "        11          64.0    404.59  36.0  18.070605      6.321719"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Merge the data for calls, minutes, messages, internet based on user_id and month\n",
    "user_per_month = pd.concat([calls_count, minutes_total, total_messages, total_internet], axis = 1)\n",
    "user_per_month['avg_duration'] = avg_duration\n",
    "\n",
    "print(user_per_month.info())\n",
    "display(user_per_month.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    user_id first_name last_name  age                                  region  \\\n",
      "0      1000   Anamaria     Bauer   45   Atlanta-Sandy Springs-Roswell, GA USA   \n",
      "6      1006     Jesusa  Bradford   73  San Francisco-Oakland-Berkeley, CA USA   \n",
      "8      1008      Emely   Hoffman   53       Orlando-Kissimmee-Sanford, FL USA   \n",
      "11     1011     Halina     Henry   73                Cleveland-Elyria, OH USA   \n",
      "13     1013    Nicolas    Snider   50                       Knoxville, TN USA   \n",
      "\n",
      "     reg_date      plan churn_date                            city state  \n",
      "0  2018-12-24  ultimate        NaT   Atlanta-Sandy Springs-Roswell    GA  \n",
      "6  2018-11-27  ultimate 2018-12-18  San Francisco-Oakland-Berkeley    CA  \n",
      "8  2018-08-03  ultimate        NaT       Orlando-Kissimmee-Sanford    FL  \n",
      "11 2018-01-18  ultimate        NaT                Cleveland-Elyria    OH  \n",
      "13 2018-12-01  ultimate        NaT                       Knoxville    TN  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1006</th>\n",
       "      <th>11</th>\n",
       "      <td>2.0</td>\n",
       "      <td>9.32</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.019893</td>\n",
       "      <td>4.660000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9.0</td>\n",
       "      <td>54.79</td>\n",
       "      <td>139.0</td>\n",
       "      <td>31.366035</td>\n",
       "      <td>6.087778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1008</th>\n",
       "      <th>10</th>\n",
       "      <td>71.0</td>\n",
       "      <td>450.21</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.706045</td>\n",
       "      <td>6.340986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>63.0</td>\n",
       "      <td>422.81</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23.121797</td>\n",
       "      <td>6.711270</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1000    12           16.0         116.83           11.0   1.856904   \n",
       "1006    11            2.0           9.32           15.0   2.019893   \n",
       "        12            9.0          54.79          139.0  31.366035   \n",
       "1008    10           71.0         450.21           21.0  16.706045   \n",
       "        11           63.0         422.81           37.0  23.121797   \n",
       "\n",
       "               avg_duration  \n",
       "user_id month                \n",
       "1000    12         7.301875  \n",
       "1006    11         4.660000  \n",
       "        12         6.087778  \n",
       "1008    10         6.340986  \n",
       "        11         6.711270  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>56.0</td>\n",
       "      <td>392.93</td>\n",
       "      <td>44.0</td>\n",
       "      <td>18.915215</td>\n",
       "      <td>7.016607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1001    8            27.0         171.14           30.0   6.756982   \n",
       "        9            49.0         297.69           44.0  13.002754   \n",
       "        10           65.0         374.11           53.0  21.807119   \n",
       "        11           64.0         404.59           36.0  18.070605   \n",
       "        12           56.0         392.93           44.0  18.915215   \n",
       "\n",
       "               avg_duration  \n",
       "user_id month                \n",
       "1001    8          6.338519  \n",
       "        9          6.075306  \n",
       "        10         5.755538  \n",
       "        11         6.321719  \n",
       "        12         7.016607  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Add the plan information\n",
    "column_names = {'call_date': 'call_count', 'duration': 'total_minutes', 'id': 'message_count', 'mb_used': 'mb_used'}\n",
    "user_per_month = user_per_month.rename(columns = column_names)\n",
    "user_per_month_rows = user_per_month\n",
    "ultimate_plan = users[users['plan'] == 'ultimate']\n",
    "print(ultimate_plan.head())\n",
    "ultimate_users = user_per_month_rows.query('user_id in @ultimate_plan.user_id')\n",
    "surf_users = user_per_month_rows.query('user_id not in @ultimate_plan.user_id')\n",
    "display(ultimate_users.head())\n",
    "display(surf_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/405073534.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ultimate_users['plan_cost'] = ult_cost\n",
      "/tmp/ipykernel_59/405073534.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  surf_users['plan_cost'] = surf_cost\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1006</th>\n",
       "      <th>11</th>\n",
       "      <td>2.0</td>\n",
       "      <td>9.32</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.019893</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9.0</td>\n",
       "      <td>54.79</td>\n",
       "      <td>139.0</td>\n",
       "      <td>31.366035</td>\n",
       "      <td>6.087778</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1008</th>\n",
       "      <th>10</th>\n",
       "      <td>71.0</td>\n",
       "      <td>450.21</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.706045</td>\n",
       "      <td>6.340986</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>63.0</td>\n",
       "      <td>422.81</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23.121797</td>\n",
       "      <td>6.711270</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1000    12           16.0         116.83           11.0   1.856904   \n",
       "1006    11            2.0           9.32           15.0   2.019893   \n",
       "        12            9.0          54.79          139.0  31.366035   \n",
       "1008    10           71.0         450.21           21.0  16.706045   \n",
       "        11           63.0         422.81           37.0  23.121797   \n",
       "\n",
       "               avg_duration  plan_cost  \n",
       "user_id month                           \n",
       "1000    12         7.301875         70  \n",
       "1006    11         4.660000         70  \n",
       "        12         6.087778         70  \n",
       "1008    10         6.340986         70  \n",
       "        11         6.711270         70  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>56.0</td>\n",
       "      <td>392.93</td>\n",
       "      <td>44.0</td>\n",
       "      <td>18.915215</td>\n",
       "      <td>7.016607</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1001    8            27.0         171.14           30.0   6.756982   \n",
       "        9            49.0         297.69           44.0  13.002754   \n",
       "        10           65.0         374.11           53.0  21.807119   \n",
       "        11           64.0         404.59           36.0  18.070605   \n",
       "        12           56.0         392.93           44.0  18.915215   \n",
       "\n",
       "               avg_duration  plan_cost  \n",
       "user_id month                           \n",
       "1001    8          6.338519         20  \n",
       "        9          6.075306         20  \n",
       "        10         5.755538         20  \n",
       "        11         6.321719         20  \n",
       "        12         7.016607         20  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ult_cost = []\n",
    "for item in ultimate_users.index:\n",
    "    ult_cost.append(70)\n",
    "ultimate_users['plan_cost'] = ult_cost\n",
    "surf_cost = []\n",
    "for item in surf_users.index:\n",
    "    surf_cost.append(20)\n",
    "surf_users['plan_cost'] = surf_cost\n",
    "display(ultimate_users.head())\n",
    "display(surf_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/901298447.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ultimate_users['minutes_revenue'] = minutes_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1006</th>\n",
       "      <th>11</th>\n",
       "      <td>2.0</td>\n",
       "      <td>9.32</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.019893</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9.0</td>\n",
       "      <td>54.79</td>\n",
       "      <td>139.0</td>\n",
       "      <td>31.366035</td>\n",
       "      <td>6.087778</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1008</th>\n",
       "      <th>10</th>\n",
       "      <td>71.0</td>\n",
       "      <td>450.21</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.706045</td>\n",
       "      <td>6.340986</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>63.0</td>\n",
       "      <td>422.81</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23.121797</td>\n",
       "      <td>6.711270</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1000    12           16.0         116.83           11.0   1.856904   \n",
       "1006    11            2.0           9.32           15.0   2.019893   \n",
       "        12            9.0          54.79          139.0  31.366035   \n",
       "1008    10           71.0         450.21           21.0  16.706045   \n",
       "        11           63.0         422.81           37.0  23.121797   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  \n",
       "user_id month                                            \n",
       "1000    12         7.301875         70                0  \n",
       "1006    11         4.660000         70                0  \n",
       "        12         6.087778         70                0  \n",
       "1008    10         6.340986         70                0  \n",
       "        11         6.711270         70                0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "minutes_revenue = []\n",
    "messages_revenue = []\n",
    "internet_revenue = []\n",
    "for each in ultimate_users['total_minutes']:\n",
    "    if each > 3000:\n",
    "        minutes = each - 3000\n",
    "        min_cost = minutes * 0.01\n",
    "        minutes_revenue.append(min_cost)\n",
    "    else: \n",
    "        minutes_revenue.append(0)\n",
    "ultimate_users['minutes_revenue'] = minutes_revenue\n",
    "display(ultimate_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/3674733045.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ultimate_users['messages_revenue'] = messages_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1006</th>\n",
       "      <th>11</th>\n",
       "      <td>2.0</td>\n",
       "      <td>9.32</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.019893</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9.0</td>\n",
       "      <td>54.79</td>\n",
       "      <td>139.0</td>\n",
       "      <td>31.366035</td>\n",
       "      <td>6.087778</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1008</th>\n",
       "      <th>10</th>\n",
       "      <td>71.0</td>\n",
       "      <td>450.21</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.706045</td>\n",
       "      <td>6.340986</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>63.0</td>\n",
       "      <td>422.81</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23.121797</td>\n",
       "      <td>6.711270</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1000    12           16.0         116.83           11.0   1.856904   \n",
       "1006    11            2.0           9.32           15.0   2.019893   \n",
       "        12            9.0          54.79          139.0  31.366035   \n",
       "1008    10           71.0         450.21           21.0  16.706045   \n",
       "        11           63.0         422.81           37.0  23.121797   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  messages_revenue  \n",
       "user_id month                                                              \n",
       "1000    12         7.301875         70                0                 0  \n",
       "1006    11         4.660000         70                0                 0  \n",
       "        12         6.087778         70                0                 0  \n",
       "1008    10         6.340986         70                0                 0  \n",
       "        11         6.711270         70                0                 0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for each in ultimate_users['message_count']:\n",
    "    if each > 1000:\n",
    "        message = each - 1000\n",
    "        mess_cost = minutes * 0.01\n",
    "        messages_revenue.append(mess_cost)\n",
    "    else: \n",
    "        messages_revenue.append(0)\n",
    "ultimate_users['messages_revenue'] = messages_revenue\n",
    "display(ultimate_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/457877408.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ultimate_users['internet_revenue'] = internet_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "      <th>internet_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12</th>\n",
       "      <td>16.0</td>\n",
       "      <td>116.83</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.856904</td>\n",
       "      <td>7.301875</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1006</th>\n",
       "      <th>11</th>\n",
       "      <td>2.0</td>\n",
       "      <td>9.32</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.019893</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>9.0</td>\n",
       "      <td>54.79</td>\n",
       "      <td>139.0</td>\n",
       "      <td>31.366035</td>\n",
       "      <td>6.087778</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1008</th>\n",
       "      <th>10</th>\n",
       "      <td>71.0</td>\n",
       "      <td>450.21</td>\n",
       "      <td>21.0</td>\n",
       "      <td>16.706045</td>\n",
       "      <td>6.340986</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>63.0</td>\n",
       "      <td>422.81</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23.121797</td>\n",
       "      <td>6.711270</td>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1000    12           16.0         116.83           11.0   1.856904   \n",
       "1006    11            2.0           9.32           15.0   2.019893   \n",
       "        12            9.0          54.79          139.0  31.366035   \n",
       "1008    10           71.0         450.21           21.0  16.706045   \n",
       "        11           63.0         422.81           37.0  23.121797   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  messages_revenue  \\\n",
       "user_id month                                                               \n",
       "1000    12         7.301875         70                0                 0   \n",
       "1006    11         4.660000         70                0                 0   \n",
       "        12         6.087778         70                0                 0   \n",
       "1008    10         6.340986         70                0                 0   \n",
       "        11         6.711270         70                0                 0   \n",
       "\n",
       "               internet_revenue  \n",
       "user_id month                    \n",
       "1000    12                    0  \n",
       "1006    11                    0  \n",
       "        12                   14  \n",
       "1008    10                    0  \n",
       "        11                    0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "      <th>internet_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>713.000000</td>\n",
       "      <td>713.000000</td>\n",
       "      <td>584.000000</td>\n",
       "      <td>719.000000</td>\n",
       "      <td>713.000000</td>\n",
       "      <td>720.0</td>\n",
       "      <td>720.0</td>\n",
       "      <td>720.0</td>\n",
       "      <td>720.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>61.221599</td>\n",
       "      <td>410.180954</td>\n",
       "      <td>46.296233</td>\n",
       "      <td>16.834612</td>\n",
       "      <td>6.678253</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.313889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>32.855296</td>\n",
       "      <td>224.745705</td>\n",
       "      <td>32.942118</td>\n",
       "      <td>7.647479</td>\n",
       "      <td>0.936871</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.395108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.227705</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>247.970000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>12.374150</td>\n",
       "      <td>6.206875</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>399.980000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>16.468213</td>\n",
       "      <td>6.687698</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>534.820000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>20.532378</td>\n",
       "      <td>7.245000</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>191.000000</td>\n",
       "      <td>1292.090000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>45.503252</td>\n",
       "      <td>10.696000</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>112.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       call_count  total_minutes  message_count     gb_used  avg_duration  \\\n",
       "count  713.000000     713.000000     584.000000  719.000000    713.000000   \n",
       "mean    61.221599     410.180954      46.296233   16.834612      6.678253   \n",
       "std     32.855296     224.745705      32.942118    7.647479      0.936871   \n",
       "min      2.000000       0.000000       1.000000    0.227705      0.000000   \n",
       "25%     37.000000     247.970000      21.000000   12.374150      6.206875   \n",
       "50%     61.000000     399.980000      41.000000   16.468213      6.687698   \n",
       "75%     80.000000     534.820000      66.000000   20.532378      7.245000   \n",
       "max    191.000000    1292.090000     166.000000   45.503252     10.696000   \n",
       "\n",
       "       plan_cost  minutes_revenue  messages_revenue  internet_revenue  \n",
       "count      720.0            720.0             720.0        720.000000  \n",
       "mean        70.0              0.0               0.0          2.313889  \n",
       "std          0.0              0.0               0.0         11.395108  \n",
       "min         70.0              0.0               0.0          0.000000  \n",
       "25%         70.0              0.0               0.0          0.000000  \n",
       "50%         70.0              0.0               0.0          0.000000  \n",
       "75%         70.0              0.0               0.0          0.000000  \n",
       "max         70.0              0.0               0.0        112.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for each in ultimate_users['gb_used']:\n",
    "    if each > 30:\n",
    "        gb = mt.ceil((each - 30))\n",
    "        gb_rev = gb * 7\n",
    "        internet_revenue.append(gb_rev)\n",
    "    else: \n",
    "        internet_revenue.append(0)\n",
    "\n",
    "ultimate_users['internet_revenue'] = internet_revenue\n",
    "display(ultimate_users.head())\n",
    "display(ultimate_users.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The process of adding the revenue from messages, calls, and internet will now be applied to the surf users. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/3877824727.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  surf_users['minutes_revenue'] = s_minutes_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>56.0</td>\n",
       "      <td>392.93</td>\n",
       "      <td>44.0</td>\n",
       "      <td>18.915215</td>\n",
       "      <td>7.016607</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1001    8            27.0         171.14           30.0   6.756982   \n",
       "        9            49.0         297.69           44.0  13.002754   \n",
       "        10           65.0         374.11           53.0  21.807119   \n",
       "        11           64.0         404.59           36.0  18.070605   \n",
       "        12           56.0         392.93           44.0  18.915215   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  \n",
       "user_id month                                            \n",
       "1001    8          6.338519         20              0.0  \n",
       "        9          6.075306         20              0.0  \n",
       "        10         5.755538         20              0.0  \n",
       "        11         6.321719         20              0.0  \n",
       "        12         7.016607         20              0.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "s_minutes_revenue = []\n",
    "s_messages_revenue = []\n",
    "s_internet_revenue = []\n",
    "for each in surf_users['total_minutes']:\n",
    "    if each > 500:\n",
    "        minutes = each - 500\n",
    "        min_cost = minutes * 0.03\n",
    "        s_minutes_revenue.append(min_cost)\n",
    "    else: \n",
    "        s_minutes_revenue.append(0)\n",
    "surf_users['minutes_revenue'] = s_minutes_revenue\n",
    "display(surf_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/1598288076.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  surf_users['messages_revenue'] = s_messages_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>56.0</td>\n",
       "      <td>392.93</td>\n",
       "      <td>44.0</td>\n",
       "      <td>18.915215</td>\n",
       "      <td>7.016607</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1001    8            27.0         171.14           30.0   6.756982   \n",
       "        9            49.0         297.69           44.0  13.002754   \n",
       "        10           65.0         374.11           53.0  21.807119   \n",
       "        11           64.0         404.59           36.0  18.070605   \n",
       "        12           56.0         392.93           44.0  18.915215   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  messages_revenue  \n",
       "user_id month                                                              \n",
       "1001    8          6.338519         20              0.0            0.0000  \n",
       "        9          6.075306         20              0.0            0.0000  \n",
       "        10         5.755538         20              0.0            2.3409  \n",
       "        11         6.321719         20              0.0            0.0000  \n",
       "        12         7.016607         20              0.0            0.0000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for each in surf_users['message_count']:\n",
    "    if each > 50:\n",
    "        message = each - 50\n",
    "        mess_cost = minutes * 0.03\n",
    "        s_messages_revenue.append(mess_cost)\n",
    "    else: \n",
    "        s_messages_revenue.append(0)\n",
    "surf_users['messages_revenue'] = s_messages_revenue\n",
    "display(surf_users.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/331975430.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  surf_users['internet_revenue'] = s_internet_revenue\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "      <th>internet_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8</th>\n",
       "      <td>27.0</td>\n",
       "      <td>171.14</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6.756982</td>\n",
       "      <td>6.338519</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>49.0</td>\n",
       "      <td>297.69</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.002754</td>\n",
       "      <td>6.075306</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "      <td>374.11</td>\n",
       "      <td>53.0</td>\n",
       "      <td>21.807119</td>\n",
       "      <td>5.755538</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3409</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>64.0</td>\n",
       "      <td>404.59</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18.070605</td>\n",
       "      <td>6.321719</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>56.0</td>\n",
       "      <td>392.93</td>\n",
       "      <td>44.0</td>\n",
       "      <td>18.915215</td>\n",
       "      <td>7.016607</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               call_count  total_minutes  message_count    gb_used  \\\n",
       "user_id month                                                        \n",
       "1001    8            27.0         171.14           30.0   6.756982   \n",
       "        9            49.0         297.69           44.0  13.002754   \n",
       "        10           65.0         374.11           53.0  21.807119   \n",
       "        11           64.0         404.59           36.0  18.070605   \n",
       "        12           56.0         392.93           44.0  18.915215   \n",
       "\n",
       "               avg_duration  plan_cost  minutes_revenue  messages_revenue  \\\n",
       "user_id month                                                               \n",
       "1001    8          6.338519         20              0.0            0.0000   \n",
       "        9          6.075306         20              0.0            0.0000   \n",
       "        10         5.755538         20              0.0            2.3409   \n",
       "        11         6.321719         20              0.0            0.0000   \n",
       "        12         7.016607         20              0.0            0.0000   \n",
       "\n",
       "               internet_revenue  \n",
       "user_id month                    \n",
       "1001    8                     0  \n",
       "        9                     0  \n",
       "        10                   70  \n",
       "        11                   40  \n",
       "        12                   40  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>call_count</th>\n",
       "      <th>total_minutes</th>\n",
       "      <th>message_count</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>avg_duration</th>\n",
       "      <th>plan_cost</th>\n",
       "      <th>minutes_revenue</th>\n",
       "      <th>messages_revenue</th>\n",
       "      <th>internet_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1545.000000</td>\n",
       "      <td>1545.000000</td>\n",
       "      <td>1222.000000</td>\n",
       "      <td>1558.000000</td>\n",
       "      <td>1545.000000</td>\n",
       "      <td>1573.0</td>\n",
       "      <td>1573.000000</td>\n",
       "      <td>1573.000000</td>\n",
       "      <td>1573.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>60.895793</td>\n",
       "      <td>412.097890</td>\n",
       "      <td>40.109656</td>\n",
       "      <td>16.325881</td>\n",
       "      <td>6.756734</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.464708</td>\n",
       "      <td>0.505980</td>\n",
       "      <td>38.652257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>31.268044</td>\n",
       "      <td>216.797727</td>\n",
       "      <td>33.035500</td>\n",
       "      <td>7.699886</td>\n",
       "      <td>1.096317</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.302048</td>\n",
       "      <td>0.963858</td>\n",
       "      <td>54.456269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.090146</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>40.000000</td>\n",
       "      <td>262.780000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>11.902300</td>\n",
       "      <td>6.185048</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>405.710000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>16.527178</td>\n",
       "      <td>6.744565</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>546.230000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>20.546738</td>\n",
       "      <td>7.278750</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.310400</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>60.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>205.000000</td>\n",
       "      <td>1431.220000</td>\n",
       "      <td>266.000000</td>\n",
       "      <td>69.269131</td>\n",
       "      <td>18.750000</td>\n",
       "      <td>20.0</td>\n",
       "      <td>27.936600</td>\n",
       "      <td>2.340900</td>\n",
       "      <td>550.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        call_count  total_minutes  message_count      gb_used  avg_duration  \\\n",
       "count  1545.000000    1545.000000    1222.000000  1558.000000   1545.000000   \n",
       "mean     60.895793     412.097890      40.109656    16.325881      6.756734   \n",
       "std      31.268044     216.797727      33.035500     7.699886      1.096317   \n",
       "min       1.000000       0.000000       1.000000     0.090146      0.000000   \n",
       "25%      40.000000     262.780000      16.000000    11.902300      6.185048   \n",
       "50%      60.000000     405.710000      32.000000    16.527178      6.744565   \n",
       "75%      80.000000     546.230000      54.000000    20.546738      7.278750   \n",
       "max     205.000000    1431.220000     266.000000    69.269131     18.750000   \n",
       "\n",
       "       plan_cost  minutes_revenue  messages_revenue  internet_revenue  \n",
       "count     1573.0      1573.000000       1573.000000       1573.000000  \n",
       "mean        20.0         1.464708          0.505980         38.652257  \n",
       "std          0.0         3.302048          0.963858         54.456269  \n",
       "min         20.0         0.000000          0.000000          0.000000  \n",
       "25%         20.0         0.000000          0.000000          0.000000  \n",
       "50%         20.0         0.000000          0.000000         20.000000  \n",
       "75%         20.0         1.310400          0.000000         60.000000  \n",
       "max         20.0        27.936600          2.340900        550.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for each in surf_users['gb_used']:\n",
    "    if each > 15:\n",
    "        gb = mt.ceil((each - 15))\n",
    "        gb_rev = gb * 10\n",
    "        s_internet_revenue.append(gb_rev)\n",
    "    else: \n",
    "        s_internet_revenue.append(0)\n",
    "\n",
    "surf_users['internet_revenue'] = s_internet_revenue\n",
    "display(surf_users.head())\n",
    "display(surf_users.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/1842816850.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  ultimate_users['total_revenue'] = ultimate_users['minutes_revenue'] + ultimate_users['messages_revenue'] + ultimate_users['internet_revenue'] + ultimate_users['plan_cost']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "user_id  month\n",
       "1000     12       70\n",
       "1006     11       70\n",
       "         12       84\n",
       "1008     10       70\n",
       "         11       70\n",
       "Name: total_revenue, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_59/1842816850.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  surf_users['total_revenue'] = surf_users['minutes_revenue'] + surf_users['messages_revenue'] + surf_users['internet_revenue'] + surf_users['plan_cost']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "user_id  month\n",
       "1001     8        20.0000\n",
       "         9        20.0000\n",
       "         10       92.3409\n",
       "         11       60.0000\n",
       "         12       60.0000\n",
       "Name: total_revenue, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the monthly revenue for each user\n",
    "ultimate_users['total_revenue'] = ultimate_users['minutes_revenue'] + ultimate_users['messages_revenue'] + ultimate_users['internet_revenue'] + ultimate_users['plan_cost']\n",
    "display(ultimate_users['total_revenue'].head())\n",
    "surf_users['total_revenue'] = surf_users['minutes_revenue'] + surf_users['messages_revenue'] + surf_users['internet_revenue'] + surf_users['plan_cost']\n",
    "display(surf_users['total_revenue'].head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Study user behaviour"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare average duration of calls per each plan per each distinct month. Plot a bar plot to visualize it.\n",
    "u_monthly_avg = ultimate_users.groupby('month').mean()\n",
    "s_monthly_avg = surf_users.groupby('month').mean()\n",
    "monthly_avg = u_monthly_avg.merge(s_monthly_avg, right_on = 'month', left_on = 'month')\n",
    "monthly_avg[['avg_duration_x', 'avg_duration_y']].plot(kind = 'bar',ylabel = 'Total Minutes', title = 'Comparison of call duration each month')\n",
    "plt.legend(['Ultimate', 'Surf'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Users in both plans have similar call durations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of minutes users of each plan require each month. Plot a histogram.\n",
    "monthly_avg[['total_minutes_x', 'total_minutes_y']].plot(kind = 'hist',\n",
    "                                                         ylabel = 'Total Minutes', \n",
    "                                                         title = 'Comparison of minutes each month', \n",
    "                                                         alpha = 0.5, bins = 50)\n",
    "plt.legend(['Ultimate', 'Surf'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Neither plans have a normal distribution of total minutes, but it seems to be skewed to the left. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ultimate: 6.581388143643348 0.09351483263219192\n",
      "Surf: 6.682611722485064 0.024926215246246483\n"
     ]
    }
   ],
   "source": [
    "# Calculate the mean and the variance of the monthly call duration\n",
    "print('Ultimate:', monthly_avg['avg_duration_x'].mean(), np.var(monthly_avg['avg_duration_x']))\n",
    "print('Surf:', monthly_avg['avg_duration_y'].mean(), np.var(monthly_avg['avg_duration_y']))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both plans have similar avgerages and the ultimate plan has a higher variance for call duration. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a boxplot to visualize the distribution of the monthly call duration\n",
    "monthly_avg[['avg_duration_x', 'avg_duration_y']].boxplot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The ultimate plan users are shown first, although there are more and farther outliers on the boxplot, the interquartile range is smaller. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of messages users of each plan tend to send each month\n",
    "monthly_avg[['message_count_x', 'message_count_y']].plot(kind = 'bar',\n",
    "                                                         ylabel = 'Total Messages', \n",
    "                                                         title = 'Comparison of messages each month')\n",
    "plt.legend(['Ultimate', 'Surf'])\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Users on the ultimate plan generally text more each month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ultimate: 39.47232523405716 97.76741194313193\n",
      "Surf: 33.30976679539808 77.24233718034748\n"
     ]
    }
   ],
   "source": [
    "print('Ultimate:', monthly_avg['message_count_x'].mean(), np.var(monthly_avg['message_count_x']))\n",
    "print('Surf:', monthly_avg['message_count_y'].mean(), np.var(monthly_avg['message_count_y']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The averages of each plan is similar with ultimate being slightly higher, but the variance for ultimate users is a lot higher at 97.77. Although the sample size for the ultimate plan is lower which can cause higher variance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "monthly_avg[['message_count_x', 'message_count_y']].plot(kind = 'hist', \n",
    "                                                        title = 'Frequency of messages for each plan', \n",
    "                                                        bins = 20, \n",
    "                                                        alpha = 0.5)\n",
    "plt.legend(['Ultimate', 'Surfer'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the amount of internet traffic consumed by users per plan\n",
    "monthly_avg[['gb_used_x', 'gb_used_y']].plot(kind = 'bar',ylabel = 'GB', title = 'Comparison of internet used each month')\n",
    "plt.legend(['Ultimate', 'Surf'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Users on the ultimate plan generally use more internet then users on the surf plan for the first 5 months of the year but users on the surf plan increase to be level with users on the ultimate plan.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ultimate: 15.846271234979925 8.214285012938397\n",
      "Surf: 14.262930910216896 11.91086846813702\n"
     ]
    }
   ],
   "source": [
    "print('Ultimate:', monthly_avg['gb_used_x'].mean(), np.var(monthly_avg['gb_used_x']))\n",
    "print('Surf:', monthly_avg['gb_used_y'].mean(), np.var(monthly_avg['gb_used_y']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "monthly_avg[['gb_used_x', 'gb_used_y']].plot(kind = 'hist', \n",
    "                                                        title = 'Frequency of internet usage for each plan', \n",
    "                                                        bins = 50, \n",
    "                                                        alpha = 0.5)\n",
    "plt.legend(['Ultimate', 'Surfer'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the histogram above we can see there are more ultimate plan users that use a higher amount of internet. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "monthly_avg[['total_revenue_x', 'total_revenue_y']].plot(kind = 'bar',ylabel = 'Average Revenue', title = 'Comparison of Revenue each month')\n",
    "plt.legend(['Ultimate', 'Surf'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The monthly average revenue is higher for the ultimate plan every month. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ultimate: 72.01106825881764 1.7056240167926762\n",
      "Surf: 51.33285558431853 197.24178293433133\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Ultimate:', monthly_avg['total_revenue_x'].mean(), np.var(monthly_avg['total_revenue_x']))\n",
    "print('Surf:', monthly_avg['total_revenue_y'].mean(), np.var(monthly_avg['total_revenue_y']))\n",
    "monthly_avg[['total_revenue_x', 'total_revenue_y']].plot(kind = 'hist', \n",
    "                                                        title = 'Frequency of Revenue usage for each plan', \n",
    "                                                        bins = 50, \n",
    "                                                        alpha = 0.5)\n",
    "plt.legend(['Ultimate', 'Surfer'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Overall the revenue for the ultimate plan is higher and has a small variance, the surf plan has a high variance so the revenue month-to-month has changed a lot. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test statistical hypotheses"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I want to see if the average revenue from users of Ultimate and Surf are the same or different. \n",
    "The null hypothesis will be: The average revenue of the plans are the same.\n",
    "The alternative hypothesis is that the average revenue of the plans are different. \n",
    "I am going to set the critical statistical significance level to 0.05. \n",
    "Above I had compared the variance between the the two plans, the surf plan has a larger variance so the equal_var will be set to False. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.000476724021214518\n",
      "We reject the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "alpha = 0.05 # your code: set a critical statistical significance level\n",
    "\n",
    "results = st.ttest_ind(monthly_avg['total_revenue_x'], monthly_avg['total_revenue_y'], equal_var = False)\n",
    "\n",
    "print('p-value:', results.pvalue)\n",
    "\n",
    "if results.pvalue < alpha:\n",
    "    print(\"We reject the null hypothesis\")\n",
    "else:\n",
    "    print(\"We can't reject the null hypothesis\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be concluded that the plans have different average revenues. In the charts above, it was clear that the ultimate plan had a higher average revenue. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I want to compare the average revenue from users in the NY-NJ area to users in other regions. I will first need to prepare the data by grouping the revenue data by city and adding the revenue of both plans for each city. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NY-NJ: 59.78453925729443 1891.079619901642\n",
      "Other: 65.18116925887264 2215.1140308340077\n"
     ]
    }
   ],
   "source": [
    "ny_region = users[users['city'] == 'New York-Newark-Jersey City']\n",
    "all_users = pd.concat([ultimate_users, surf_users])\n",
    "\n",
    "ny_users = all_users.query('user_id in @ny_region.user_id')\n",
    "other_users = all_users.query('user_id not in @ny_region.user_id')\n",
    "print('NY-NJ:', ny_users['total_revenue'].mean(), np.var(ny_users['total_revenue']))\n",
    "print('Other:', other_users['total_revenue'].mean(), np.var(other_users['total_revenue']))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The null hypothesis will be that both regions' average revenue is statistically the same. \n",
    "The alternative hypothesis is that they are different. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.030442760524132577\n",
      "We reject the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "alpha = 0.05 # your code: set a critical statistical significance level\n",
    "\n",
    "results = st.ttest_ind(ny_users['total_revenue'], other_users['total_revenue'], equal_var = False)\n",
    "\n",
    "print('p-value:', results.pvalue)\n",
    "\n",
    "if results.pvalue < alpha:\n",
    "    print(\"We reject the null hypothesis\")\n",
    "else:\n",
    "    print(\"We can't reject the null hypothesis\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The average revenue of the regions are significantly different with users in NY-NJ having a lower average revenue. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### General conclusions\n",
    "\n",
    "Starting off in section 1.6.2 I had calculated that the number of ultimate users in the sample was only 1/3 of the overall sample. Initially I had concerns if that would skew the data, however, going through the project I saw users on the ultimate plan consistently had a smaller variance in most all areas. \n",
    "\n",
    "The main assumption throughout this project is that the sample is representative of all the customers in the US. \n",
    "\n",
    "Looking in to plan behaviors I saw that average call duration was similar but ultimate users had a larger variance. \n",
    "Ultimate users generally sent more messages and both plans increased throughout the year. \n",
    "Ultimate useres generally used more internet.\n",
    "\n",
    "Average monthly revenue was higher from the ultimate plan than the surf plan. \n",
    "I used a t-test to determing if the difference was significant, and it was. \n",
    "\n",
    "NY-NJ had a smaller average monthly revenue compared to the rest of the cities. I used a t-test to determine if the difference was significant and it was. \n",
    "\n",
    "While I was charting the plan use behavior I noticed a trend of use increasing throughout the year. Further study could show if the increase was a result of the business growing each month. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Based on this data the ultimate plan generates more revenue. "
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 828,
    "start_time": "2021-11-16T09:21:11.304Z"
   },
   {
    "duration": 893,
    "start_time": "2021-11-16T09:21:17.728Z"
   },
   {
    "duration": 1150,
    "start_time": "2021-11-16T09:21:29.568Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:24:14.495Z"
   },
   {
    "duration": 120,
    "start_time": "2021-11-16T09:24:46.630Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:28:27.882Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:29:54.281Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:30:45.936Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:31:06.300Z"
   },
   {
    "duration": 113,
    "start_time": "2021-11-16T09:31:37.208Z"
   },
   {
    "duration": 143,
    "start_time": "2021-11-16T09:31:48.656Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-16T09:31:55.678Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:08.535Z"
   },
   {
    "duration": 111,
    "start_time": "2021-11-16T09:32:10.120Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:15.732Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:32:29.423Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:03:03.074Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:01.288Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:46.923Z"
   },
   {
    "duration": 121,
    "start_time": "2021-11-16T10:37:46.494Z"
   },
   {
    "duration": 125,
    "start_time": "2021-11-16T10:38:20.632Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T10:46:53.001Z"
   },
   {
    "duration": 110,
    "start_time": "2021-11-16T10:48:25.775Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:50:18.720Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:50:37.649Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-16T10:50:51.884Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:51:56.237Z"
   },
   {
    "duration": 101,
    "start_time": "2021-11-16T10:53:13.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:55:59.186Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:10.751Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.038Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.174Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:56:49.414Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.680Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:50.370Z"
   },
   {
    "duration": 114,
    "start_time": "2021-11-16T10:59:34.518Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:01:41.201Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-16T11:01:48.754Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:16.685Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:19.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:47.067Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:49.353Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.953Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T11:07:52.072Z"
   },
   {
    "duration": 187,
    "start_time": "2021-11-16T11:09:23.468Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:01.455Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:05.069Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:13.376Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:14.434Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:22.853Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:27:29.279Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:29:08.919Z"
   },
   {
    "duration": 118,
    "start_time": "2021-11-16T11:29:46.703Z"
   },
   {
    "duration": 437,
    "start_time": "2021-11-16T11:36:02.181Z"
   },
   {
    "duration": 157,
    "start_time": "2021-11-16T11:36:14.388Z"
   },
   {
    "duration": 207,
    "start_time": "2021-11-16T11:47:15.898Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.092Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.236Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:59:12.005Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T12:00:33.446Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:14.453Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:39.512Z"
   },
   {
    "duration": 106,
    "start_time": "2021-11-16T12:03:03.460Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:21.139Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:22.229Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:38.806Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:41.958Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:43:46.551Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:58:21.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:59:21.872Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:45.352Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:49.646Z"
   },
   {
    "duration": 159,
    "start_time": "2021-11-17T21:02:26.949Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.461Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.694Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:05:28.145Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-17T21:05:57.787Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:37.993Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:38.261Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:11:54.358Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:12:43.846Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:13:08.773Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:14:44.441Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:42.059Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:15:51.995Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:53.923Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:55.282Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:28.492Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:32.603Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:17:06.941Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:18:05.733Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:21:35.255Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:21:37.804Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:23:06.071Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:24.799Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:32.591Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:28:31.559Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:28:45.448Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:17.303Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:29.617Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:32.681Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:11.474Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:14.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:53.943Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:56.165Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:37:16.590Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:37:22.702Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:38:03.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:08.601Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:12.928Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:48.896Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:38:49.171Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:39:57.889Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:39:58.057Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.108Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.629Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:42:49.136Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:15.137Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:16.766Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:31.711Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:36.312Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:08.825Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:10.119Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:13.748Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:22.219Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:33.412Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:46:01.885Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:46:03.628Z"
   },
   {
    "duration": 107,
    "start_time": "2021-11-17T21:47:32.512Z"
   },
   {
    "duration": 103,
    "start_time": "2021-11-17T21:50:36.243Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:28:31.440Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:29:00.168Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:31:27.008Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:35:34.288Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:38:04.527Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "512px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
